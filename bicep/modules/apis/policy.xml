<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
    <inbound>
        <!-- check the cache for secret first -->
        <set-variable name="soapHeader" value="@{
            var xmlDocument = new XmlDocument();

            // Load SOAP message
            xmlDocument.LoadXml(context.Request.Body.As<string>());
            var root = xmlDocument.DocumentElement;
            var username = root.GetElementsByTagName("o:Username");
            var password = root.GetElementsByTagName("o:Password");

            var obj = new JObject();
            obj["username"] = username[0].InnerText;                  
            obj["password"] = password[0].InnerText;
            
            return obj;            

        }" />
        <send-request mode="new" response-variable-name="keyvaultsecret" timeout="20" ignore-error="false">
            <set-url>@{   
                var username = ((JObject)context.Variables["soapHeader"])["username"];                                
                string url = "https://{{keyVaultName}}.vault.azure.net/secrets/" + username + "/?api-version=7.0";                
                return url;
            }</set-url>
            <set-method>GET</set-method>
            <authentication-managed-identity resource="https://vault.azure.net" />
        </send-request>
        <set-variable name="keyvaultsecretResponse" value="@(((IResponse)context.Variables["keyvaultsecret"]).Body.As<JObject>()["value"].ToString())" />
        <choose>
            <when condition="@{
                var secretValue = (String)context.Variables["keyvaultsecretResponse"];
                var password = (String)((JObject)context.Variables["soapHeader"])["password"];
                byte[] bytes = Encoding.ASCII.GetBytes(password);
                if (secretValue == Convert.ToBase64String(bytes)) 
                {
                    return true;
                }

                return false;            
            }">
                <return-response>
                    <set-status code="200" reason="Done" />
                    <set-header name="content-type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-body>@{
                        return "password match";           
                    }</set-body>
                </return-response>
            </when>
            <otherwise>
                <return-response>
                    <set-status code="200" reason="Done" />
                    <set-header name="content-type" exists-action="override">
                        <value>application/json</value>
                    </set-header>
                    <set-body>@{
                        return "password not match";             
                    }</set-body>
                </return-response>
            </otherwise>
        </choose>
        <base />
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>